#!/usr/bin/env bash
set -euo pipefail
set -x

cd "$(dirname "${BASH_SOURCE[0]}")"
source disk-config
source system-config

# Import the config we need so that we crash early if it isn't there.
declare -r CONFIG_HOST_NAME=${HOST_NAME}
declare -r CONFIG_USER_NAME=${USER_NAME}
declare -r CONFIG_SSHD_PORT=${SSHD_PORT}
declare -r CONFIG_GIT_USER_NAME=${GIT_USER_NAME}
declare -r CONFIG_GIT_EMAIL=${GIT_EMAIL}
declare -r CONFIG_POST_BOOTSTRAP_HOOK=${POST_BOOTSTRAP_HOOK:-}
declare -r CONFIG_CRYPT_PARTITION=${CRYPT_PARTITION}

main() {
    printf "In chroot setup script\n"
    set_time_zone
    configure_time
    set_locale_info
    configure_host
    setup_initramfs
    setup_login
    disable_root
    setup_systemd_boot
    enable_dhcp
    install_base_packages
    configure_sshd
    configure_git
    install_graphical_desktop

    if [[ -x "${CONFIG_POST_BOOTSTRAP_HOOK}" ]]; then
        USER_NAME=$CONFIG_USER_NAME \
            HOST_NAME=$CONFIG_HOST_NAME \
            "./${CONFIG_POST_BOOTSTRAP_HOOK}"
    fi
}

set_time_zone() {
    printf "Configuring time zone\n"
    ln -sf "/usr/share/zoneinfo/${TZ_REGION}/${TZ_CITY}" /etc/localtime
}

configure_time() {
    printf "Enabling NTP\n"
    timedatectl set-ntp true

    printf "Setting hardware clock\n"
    hwclock --systohc
}

set_locale_info() {
    printf "Configuring locale information\n"
    sed --in-place=.original 's/#\(en_US\|en_GB\|en_DK\|de_DE\|de_AT\)/\1/' /etc/locale.gen
    locale-gen

    {
        printf "LANG=en_DK.UTF-8\n"
        printf "LANGUAGE=en_GB:en\n"
    } > /etc/locale.conf

    {
        printf "\n"
    } > /etc/vconsole.conf
}

configure_host() {
    printf "Configuring host information\n"
    printf "%s\n" "${CONFIG_HOST_NAME}" > /etc/hostname

    {
        printf "# Local Entries\n"
        printf "127.0.0.1\t\t\tlocalhost\n"
        printf "127.0.1.1\t\t\t%s\n" "${CONFIG_HOST_NAME}"
        printf "\n"
        printf "# Local Entries (IPv6)\n"
        printf ":1\t\tip6-localhost ip6-loopback\n"
    } > /etc/hosts

    if [[ -f private/private-hosts ]]; then
        cat private/private-hosts >> /etc/hosts
    fi
}

setup_initramfs() {
    printf "Setting up initcpio\n"
    sed --in-place=.original 's/^HOOKS=.*$/HOOKS=(base systemd keyboard autodetect sd-vconsole modconf block sd-encrypt sd-lvm2 filesystems fsck)/' /etc/mkinitcpio.conf
    mkinitcpio -p linux
}

setup_login() {
    printf "Setting up new user called %s.\n"

    # NOTE: see https://wiki.archlinux.org/index.php/users_and_groups for group details
    if ! getent passwd "${CONFIG_USER_NAME}" > /dev/null 2&>1; then
        useradd --create-home --groups wheel,adm,log,rfkill,sys "${CONFIG_USER_NAME}"
        passwd "${CONFIG_USER_NAME}"
    fi

    # Make sure it's in sudoers
    {
        printf '%%wheel ALL=(ALL) ALL\n'
    } > /etc/sudoers.d/wheel
}

disable_root() {
    printf "Disabling root.\n"

    # Remove roots password completely and lock the user
    passwd -dl root

    # NOTE: I disabled this because otherwise you can't sudo usermod afterwards, it complains
    #       that the root user is disabled, which means you can't edit group memberships
    # # And set it's account expiry into the past
    # usermod --expiredate 1 root
}

setup_systemd_boot() {
    local -r lvm_vg_name=main
    local -r lvm_lv_name=root
    local -r device_id=$(blkid "${CRYPT_PARTITION}" --match-tag=UUID --output=value)

    # make sure we've got some microcode
    pacman -S --noconfirm intel-ucode

    # our ESP is always mounted to /boot
    bootctl --path=/boot install

    {
        printf "default arch\n"
        printf "timeout 5\n"
        printf "console-mode max\n"
        printf "editor no\n"
    } > /boot/loader/loader.conf

    {
        printf "title   Arch Linux\n"
        printf "linux   /vmlinuz-linux\n"
        printf "initrd  /intel-ucode.img\n"
        printf "initrd  /initramfs-linux.img\n"
        printf "options rd.luks.name=%s=cryptlvm root=/dev/%s/%s\n" "${device_id}" "${lvm_vg_name}" "${lvm_lv_name}"
    } > /boot/loader/entries/arch.conf
}

enable_dhcp() {
    printf "Enabling DHCP Client\n"
    systemctl enable dhcpcd
}

install_base_packages() {
    printf "Installing basic packages\n"

    local -a base_packages=()

    base_packages+=(base-devel)
    base_packages+=(linux-tools) # perf
    base_packages+=(git git-lfs vim)
    base_packages+=(openssh)
    base_packages+=(netctl dialog wpa_supplicant) # netctl has wifi-menu - dialog and wpa_supplicant are needed for wifi

    pacman -S --noconfirm --needed "${base_packages[@]}"
}

configure_sshd() {
    local -r user_home_directory=$(getent passwd "${CONFIG_USER_NAME}" | cut -d: -f6)
    local -r user_ssh_directory=${user_home_directory}/.ssh

    if [[ -f private/id_rsa ]] && [[ -f private/id_rsa.pub ]]; then
        mkdir -p "${user_ssh_directory}"
        cp private/id_rsa "${user_ssh_directory}/"
        cp private/id_rsa.pub "${user_ssh_directory}/"
        cp private/id_rsa.pub "${user_ssh_directory}/authorized_keys"
        chown -R "${CONFIG_USER_NAME}:${CONFIG_USER_NAME}" "${user_ssh_directory}"
    fi

    SSHD_PORT=${CONFIG_SSHD_PORT} envsubst < sources/sshd_config-template > /etc/ssh/sshd_config

    systemctl enable sshd
}

configure_git() {
    local -r user_home_directory=$(getent passwd "${CONFIG_USER_NAME}" | cut -d: -f6)
    local -r user_git_config=${user_home_directory}/.gitconfig

    {
        printf "[user]\n"
        printf "\tname = %s\n" "${CONFIG_GIT_USER_NAME}"
        printf "\temail = %s\n" "${CONFIG_GIT_EMAIL}"
        printf "[push]\n"
        printf "\tdefault = %s\n" "simple"
    } > "${user_git_config}"

    chown "${CONFIG_USER_NAME}:${CONFIG_USER_NAME}" "${user_git_config}"
}

install_graphical_desktop() {
    local -a packages=()

    printf "Installing graphical desktop\n"

    packages+=(xorg)
    packages+=(xorg-server)
    packages+=(xorg-xinit)
    packages+=(xorg-apps)
    packages+=(xorg-drivers) # too much?
    packages+=(xorg-fonts)
    packages+=(mesa)
    packages+=(mate)
    packages+=(mate-extra)
    packages+=(lightdm lightdm-gtk-greeter)
    packages+=(pulseaudio pulseaudio-alsa pavucontrol)
    packages+=(firefox)

    pacman -S --noconfirm --needed "${packages[@]}"

    systemctl enable lightdm
}

main "${@}"
